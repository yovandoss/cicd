# name: Simple Action

# on:
#   push:
#     branches:
#       - main  # Trigger on push to the 'main' branch

# jobs:
#   simple-job:
#     runs-on: windows-latest

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Run a simple command
#         run: echo "This is a simple action run on push to main!"


# name: Deploy .NET 7 Application to Windows

# on:
#   push:
#     branches:
#       - main  # Trigger on push to the 'main' branch

# jobs:
#   build_and_deploy:
#     runs-on: windows-latest  # Use a Windows environment for the job

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3  # Checkout the repository

#       - name: Set up .NET 7 SDK
#         uses: actions/setup-dotnet@v3
#         with:
#           dotnet-version: '7.0.x'  # Specify .NET 7 version

#       - name: Restore dependencies
#         run: dotnet restore  # Restore NuGet dependencies

#       - name: Build application
#         run: dotnet build --configuration Release  # Build the application in Release mode

#       - name: Publish application
#         run: dotnet publish --configuration Release --output ./publish  # Publish the app to a folder

#       - name: Deploy to Windows Server
#         run: |
#           # You may use PowerShell, SCP, or any other tool to deploy the app
#           # Here we are using a basic example of copying files over to a server
          
#           # Set up deployment path and server details
#           $deploymentPath = "C:\path\to\deployment\folder"
#           $serverAddress = "your-server-address"  # Replace with actual server address
          
#           # Example command to copy files over
#           New-Item -ItemType Directory -Force -Path $deploymentPath
#           Copy-Item -Recurse ./publish/* $deploymentPath
          
#           # Restart the application on the server (adjust based on how your app runs)
#           Restart-Service -Name "YourAppServiceName"  # Adjust for your service name
          
#         shell: pwsh  # Use PowerShell shell for Windows commands

name: Deploy .NET 7 Application to Windows Server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: windows-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore ./CICD/CICD.sln

      # Step 4: Build and Publish Application
      - name: Build and Publish Application
        run: dotnet publish ./CICD/CICD.sln -c Release -o ./publish

      # Step 5: Copy Files to Windows Server
      - name: Deploy Application via PowerShell
        shell: pwsh
        run: |
          # Validate Secrets
          if (-not "${{ secrets.WINDOWS_SERVER_HOST }}" -or -not "${{ secrets.WINDOWS_SERVER_USER }}" -or -not "${{ secrets.WINDOWS_SERVER_PASSWORD }}") {
              throw "Missing required secrets. Please check WINDOWS_SERVER_HOST, WINDOWS_SERVER_USER, and WINDOWS_SERVER_PASSWORD."
          }

          # Assign Variables
          $targetServer = "${{ secrets.WINDOWS_SERVER_HOST }}"
          $username = "${{ secrets.WINDOWS_SERVER_USER }}"
          $password = ConvertTo-SecureString "${{ secrets.WINDOWS_SERVER_PASSWORD }}" -AsPlainText -Force
          $credential = New-Object System.Management.Automation.PSCredential ($username, $password)

          # Define Source and Target Paths
          $sourcePath = "$(pwd)/publish/*"
          $destinationPath = "\\$targetServer\C$\inetpub\wwwroot\MyApp"

          # Create Target Directory if Missing
          Invoke-Command -Credential $credential -ComputerName $targetServer -ScriptBlock {
              param ($destinationPath)
              if (!(Test-Path -Path $destinationPath)) {
                  New-Item -ItemType Directory -Force -Path $destinationPath
              }
          } -ArgumentList $destinationPath

          # Copy Files to Target Server
          Copy-Item -Path $sourcePath -Destination $destinationPath -Recurse -Force -Credential $credential

